"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { AlertTriangle, Shield, Bug, Lock } from "lucide-react"

export function VulnerabilityAnalysis() {
  const vulnerabilities = [
    {
      id: "CVE-2023-1337",
      name: "üé≠ Halloween Buffer Overflow",
      severity: "Critical",
      score: 9.8,
      affected: "Web Server",
      description: "Buffer overflow in seasonal content parser",
      status: "Unpatched"
    },
    {
      id: "CVE-2023-1338", 
      name: "üï∏Ô∏è Cross-Site Scripting",
      severity: "High",
      score: 8.2,
      affected: "Contact Form",
      description: "XSS vulnerability in user input validation",
      status: "Patch Available"
    },
    {
      id: "CVE-2023-1339",
      name: "üëª Authentication Bypass", 
      severity: "Medium",
      score: 6.5,
      affected: "Admin Panel",
      description: "Weak session management allows bypass",
      status: "In Progress"
    },
    {
      id: "CVE-2023-1340",
      name: "ü¶á Information Disclosure",
      severity: "Low",
      score: 3.1,
      affected: "Error Pages",
      description: "Stack traces exposed in error messages",
      status: "Patched"
    }
  ]

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical": return "bg-red-500/20 text-red-300 border-red-500/30"
      case "High": return "bg-orange-500/20 text-orange-300 border-orange-500/30"
      case "Medium": return "bg-yellow-500/20 text-yellow-300 border-yellow-500/30"
      case "Low": return "bg-blue-500/20 text-blue-300 border-blue-500/30"
      default: return "bg-gray-500/20 text-gray-300 border-gray-500/30"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Unpatched": return "text-red-400"
      case "Patch Available": return "text-yellow-400"
      case "In Progress": return "text-blue-400"
      case "Patched": return "text-green-400"
      default: return "text-gray-400"
    }
  }

  const totalVulns = vulnerabilities.length
  const patchedVulns = vulnerabilities.filter(v => v.status === "Patched").length
  const patchProgress = (patchedVulns / totalVulns) * 100

  return (
    <Card className="border-red-500/30 bg-gradient-to-r from-black to-red-950">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-red-400">
          <Bug className="h-5 w-5" />
          üîç Vulnerability Analysis
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Progress Overview */}
          <div className="p-4 bg-black/30 rounded-lg border border-red-500/20">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm text-gray-400">Patch Progress</span>
              <span className="text-sm text-gray-300">{patchedVulns}/{totalVulns} resolved</span>
            </div>
            <Progress value={patchProgress} className="h-2" />
            <div className="text-xs text-gray-500 mt-1">
              {Math.round(patchProgress)}% of vulnerabilities have been addressed
            </div>
          </div>

          {/* Vulnerability List */}
          <div className="space-y-3">
            {vulnerabilities.map((vuln, index) => (
              <div key={index} className="p-4 bg-black/30 rounded-lg border border-red-500/20">
                <div className="flex items-start justify-between mb-2">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="font-medium text-white">{vuln.name}</h4>
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {vuln.severity} ({vuln.score})
                      </Badge>
                    </div>
                    <p className="text-sm text-gray-400 mb-1">{vuln.description}</p>
                    <div className="flex items-center gap-4 text-xs">
                      <span className="text-gray-500">ID: {vuln.id}</span>
                      <span className="text-gray-500">Affects: {vuln.affected}</span>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className={`text-sm font-medium ${getStatusColor(vuln.status)}`}>
                      {vuln.status}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="pt-2 border-t border-gray-700">
            <div className="flex items-center gap-2 text-xs text-gray-500">
              <AlertTriangle className="h-3 w-3" />
              Vulnerability scan completed 15 minutes ago
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}