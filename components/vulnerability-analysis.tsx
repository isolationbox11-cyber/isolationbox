"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { RefreshCw, AlertTriangle } from "lucide-react"

interface Vulnerability {
  id: string;
  title: string;
  severity: 'critical' | 'high' | 'medium' | 'low';
  cvss: number;
  description: string;
  affected: string;
  status: string;
  emoji: string;
}

export function VulnerabilityAnalysis() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<string>('');

  const fetchVulnerabilities = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/vulnerabilities');
      const result = await response.json();
      
      if (result.success) {
        setVulnerabilities(result.data);
        setLastUpdated(new Date(result.timestamp).toLocaleTimeString());
      } else {
        throw new Error(result.error || 'Failed to fetch vulnerabilities');
      }
    } catch (err) {
      console.error('Error fetching vulnerabilities:', err);
      setError(err instanceof Error ? err.message : 'Failed to fetch vulnerability data');
      
      // Fallback to demo data when API fails
      setVulnerabilities([
        {
          id: "CVE-2023-44487",
          title: "HTTP/2 Rapid Reset Attack",
          severity: "critical",
          cvss: 9.8,
          description: "DDoS vulnerability affecting HTTP/2 implementations",
          affected: "Web servers, Load balancers",
          status: "patch-available",
          emoji: "üö®"
        },
        {
          id: "CVE-2023-42793", 
          title: "JetBrains TeamCity Authentication Bypass",
          severity: "high",
          cvss: 8.1,
          description: "Authentication bypass in TeamCity server",
          affected: "TeamCity instances",
          status: "patch-available",
          emoji: "üîê"
        },
        {
          id: "CVE-2023-41265",
          title: "Qlik Sense Path Traversal",
          severity: "high", 
          cvss: 7.5,
          description: "Path traversal vulnerability in Qlik Sense",
          affected: "Qlik Sense servers",
          status: "investigating",
          emoji: "üìÇ"
        },
        {
          id: "CVE-2023-38831",
          title: "WinRAR Code Execution Vulnerability",
          severity: "high",
          cvss: 7.8,
          description: "Remote code execution via crafted archives",
          affected: "WinRAR versions before 6.23",
          status: "patched",
          emoji: "üì¶"
        }
      ]);
      setLastUpdated(new Date().toLocaleTimeString());
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchVulnerabilities();
  }, []);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-900 text-red-100"
      case "high": return "bg-red-700 text-red-100"
      case "medium": return "bg-yellow-600 text-yellow-100"
      case "low": return "bg-green-600 text-green-100"
      default: return "bg-gray-600 text-gray-100"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case "patched": return "bg-green-600"
      case "patch-available": return "bg-blue-600"
      case "investigating": return "bg-yellow-600"
      default: return "bg-gray-600"
    }
  }

  return (
    <Card className="border-orange-800/30 bg-black/40">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <span className="text-2xl">üõ°Ô∏è</span>
            <div>
              <CardTitle className="text-orange-300">
                Vulnerability Analysis
              </CardTitle>
              <CardDescription className="text-orange-200/70">
                {error ? 'Demo data (API unavailable)' : 'Live VirusTotal CVE data'}
              </CardDescription>
            </div>
          </div>
          <Button
            onClick={fetchVulnerabilities}
            disabled={loading}
            variant="outline"
            size="sm"
            className="border-orange-600 text-orange-300 hover:bg-orange-600/10"
          >
            <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
        </div>
        {lastUpdated && (
          <div className="text-xs text-orange-200/60">
            Last updated: {lastUpdated}
          </div>
        )}
        {error && (
          <div className="flex items-center gap-2 text-xs text-yellow-400 bg-yellow-900/20 p-2 rounded">
            <AlertTriangle className="h-4 w-4" />
            {error}
          </div>
        )}
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {vulnerabilities.map((vuln, index) => (
            <div key={index} className="p-4 bg-orange-950/30 rounded-lg border border-orange-800/20">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center gap-2">
                  <span className="text-lg">{vuln.emoji}</span>
                  <div>
                    <h4 className="font-medium text-orange-300">{vuln.id}</h4>
                    <p className="text-sm text-orange-200/80">{vuln.title}</p>
                  </div>
                </div>
                <div className="flex flex-col items-end gap-2">
                  <Badge className={getSeverityColor(vuln.severity)}>
                    {vuln.severity.toUpperCase()}
                  </Badge>
                  <div className="text-xs text-orange-200/60">
                    CVSS: {vuln.cvss}
                  </div>
                </div>
              </div>
              
              <p className="text-sm text-orange-100/70 mb-3">{vuln.description}</p>
              
              <div className="flex items-center justify-between text-xs">
                <span className="text-orange-200/60">
                  Affected: {vuln.affected}
                </span>
                <Badge className={getStatusColor(vuln.status)} variant="outline">
                  {vuln.status.replace('-', ' ').toUpperCase()}
                </Badge>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  )
}