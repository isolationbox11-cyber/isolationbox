"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { RefreshCw, ExternalLink } from "lucide-react"
import { useState, useEffect } from "react"
import { nvdAPI, type VulnerabilityData } from "@/lib/api-client"

export function VulnerabilityAnalysis() {
  const [vulnerabilities, setVulnerabilities] = useState<VulnerabilityData[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null)
  const [stats, setStats] = useState({ critical: 0, high: 0, medium: 0, low: 0 })

  const loadVulnerabilities = async () => {
    setLoading(true)
    setError(null)
    try {
      const vulnData = await nvdAPI.getLatestVulnerabilities(10)
      setVulnerabilities(vulnData)
      setLastUpdate(new Date())
      
      // Calculate stats
      const newStats = { critical: 0, high: 0, medium: 0, low: 0 }
      vulnData.forEach(vuln => {
        newStats[vuln.severity]++
      })
      setStats(newStats)
    } catch (err) {
      setError('Failed to load vulnerability data')
      console.error('Error loading vulnerabilities:', err)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    loadVulnerabilities()
    
    // Auto-refresh every 10 minutes
    const interval = setInterval(loadVulnerabilities, 10 * 60 * 1000)
    return () => clearInterval(interval)
  }, [])

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-700"
      case "high": return "bg-red-600"
      case "medium": return "bg-yellow-600"
      case "low": return "bg-green-600"
      default: return "bg-gray-600"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "patched": return "bg-green-600"
      case "patch-available": return "bg-blue-600"
      case "investigating": return "bg-yellow-600"
      case "no-fix": return "bg-red-600"
      default: return "bg-gray-600"
    }
  }

  return (
    <Card className="border-orange-800/30 bg-black/40">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-orange-300">
          <span className="text-2xl">üõ°Ô∏è</span>
          Vulnerability Analysis
          <Button
            variant="ghost"
            size="sm"
            onClick={loadVulnerabilities}
            disabled={loading}
            className="ml-auto text-orange-400 hover:text-orange-300"
          >
            <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
          </Button>
        </CardTitle>
        <CardDescription className="text-orange-200/70">
          Latest security vulnerabilities and threat assessments
          {lastUpdate && (
            <span className="block text-xs text-orange-300/60 mt-1">
              Last updated: {lastUpdate.toLocaleTimeString()}
            </span>
          )}
        </CardDescription>
      </CardHeader>
      <CardContent>
        {loading && vulnerabilities.length === 0 ? (
          <div className="space-y-4">
            <div className="grid grid-cols-4 gap-4 mb-6">
              {[1, 2, 3, 4].map((i) => (
                <div key={i} className="text-center p-3 bg-orange-950/30 rounded-lg border border-orange-800/20 animate-pulse">
                  <div className="w-8 h-8 bg-orange-600/30 rounded mx-auto mb-2"></div>
                  <div className="w-12 h-3 bg-orange-600/20 rounded mx-auto"></div>
                </div>
              ))}
            </div>
            {[1, 2, 3].map((i) => (
              <div key={i} className="p-4 bg-orange-950/30 rounded-lg border border-orange-800/20 animate-pulse">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <div className="w-6 h-6 bg-orange-600/30 rounded"></div>
                    <div className="w-48 h-4 bg-orange-600/30 rounded"></div>
                  </div>
                  <div className="flex gap-2">
                    <div className="w-16 h-6 bg-orange-600/30 rounded"></div>
                    <div className="w-20 h-6 bg-orange-600/30 rounded"></div>
                  </div>
                </div>
                <div className="w-full h-3 bg-orange-600/20 rounded mb-2"></div>
                <div className="w-32 h-3 bg-orange-600/20 rounded"></div>
              </div>
            ))}
          </div>
        ) : error ? (
          <div className="p-4 bg-red-950/30 rounded-lg border border-red-800/20">
            <p className="text-red-300 mb-2">‚ö†Ô∏è {error}</p>
            <Button 
              onClick={loadVulnerabilities} 
              variant="outline" 
              size="sm"
              className="border-red-600 text-red-300 hover:bg-red-950/50"
            >
              Retry
            </Button>
          </div>
        ) : (
          <div className="space-y-4">
            <div className="grid grid-cols-4 gap-4 mb-6">
              <div className="text-center p-3 bg-red-950/30 rounded-lg border border-red-800/20">
                <div className="text-2xl font-bold text-red-400">{stats.critical}</div>
                <div className="text-xs text-red-300">Critical</div>
              </div>
              <div className="text-center p-3 bg-orange-950/30 rounded-lg border border-orange-800/20">
                <div className="text-2xl font-bold text-orange-400">{stats.high}</div>
                <div className="text-xs text-orange-300">High</div>
              </div>
              <div className="text-center p-3 bg-yellow-950/30 rounded-lg border border-yellow-800/20">
                <div className="text-2xl font-bold text-yellow-400">{stats.medium}</div>
                <div className="text-xs text-yellow-300">Medium</div>
              </div>
              <div className="text-center p-3 bg-green-950/30 rounded-lg border border-green-800/20">
                <div className="text-2xl font-bold text-green-400">{stats.low}</div>
                <div className="text-xs text-green-300">Low</div>
              </div>
            </div>

            <div className="space-y-3">
              <h4 className="font-medium text-orange-300">Latest Critical Vulnerabilities</h4>
              {vulnerabilities.map((vuln, index) => (
                <div key={index} className="p-4 bg-orange-950/30 rounded-lg border border-orange-800/20 hover:bg-orange-950/40 transition-colors">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <span className="text-lg animate-pulse">{vuln.emoji}</span>
                      <div>
                        <h5 className="text-sm font-medium text-orange-300">{vuln.title}</h5>
                        <div className="flex items-center gap-2">
                          <p className="text-xs text-orange-200/60">{vuln.id} ‚Ä¢ CVSS {vuln.cvss}</p>
                          <button
                            onClick={() => window.open(`https://nvd.nist.gov/vuln/detail/${vuln.id}`, '_blank')}
                            className="text-orange-400/70 hover:text-orange-400 transition-colors"
                          >
                            <ExternalLink className="h-3 w-3" />
                          </button>
                        </div>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                      <Badge className={getStatusColor(vuln.status)}>
                        {vuln.status.replace("-", " ").toUpperCase()}
                      </Badge>
                    </div>
                  </div>
                  <p className="text-sm text-orange-100/70 mb-2">{vuln.description}</p>
                  <div className="flex items-center justify-between">
                    <p className="text-xs text-orange-200/60">Affected: {vuln.affected}</p>
                    <p className="text-xs text-orange-300/60">Published: {vuln.publishedDate}</p>
                  </div>
                </div>
              ))}
            </div>

            <div className="flex gap-2 pt-4">
              <Button className="bg-orange-600 hover:bg-orange-700">
                Generate Full Report
              </Button>
              <Button variant="outline" className="border-orange-600 text-orange-300">
                Export CVE List
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}