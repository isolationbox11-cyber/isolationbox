"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { AlertTriangle, Shield, Bug } from "lucide-react"

export function VulnerabilityAnalysis() {
  const vulnerabilities = [
    {
      id: "CVE-2023-1234",
      title: "Buffer Overflow in Network Driver",
      severity: "Critical",
      cvss: 9.8,
      description: "Remote code execution vulnerability in network driver component",
      affected: "Windows 10/11, Server 2019/2022",
      status: "open"
    },
    {
      id: "CVE-2023-5678", 
      title: "Privilege Escalation in System Service",
      severity: "High",
      cvss: 7.8,
      description: "Local privilege escalation through misconfigured service permissions",
      affected: "Linux Kernel 5.x",
      status: "patched"
    },
    {
      id: "CVE-2023-9012",
      title: "SQL Injection in Web Application",
      severity: "Medium",
      cvss: 6.1,
      description: "SQL injection vulnerability in user authentication module",
      affected: "Custom Web App v2.1",
      status: "open"
    }
  ]

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'destructive'
      case 'High': return 'destructive'
      case 'Medium': return 'secondary'
      case 'Low': return 'default'
      default: return 'default'
    }
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Bug className="h-5 w-5" />
            Vulnerability Analysis
          </CardTitle>
          <CardDescription>
            Known vulnerabilities and security weaknesses in your environment
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Alert>
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>
              {vulnerabilities.filter(v => v.status === 'open').length} critical vulnerabilities require immediate attention
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>

      <div className="grid gap-4">
        {vulnerabilities.map((vuln) => (
          <Card key={vuln.id}>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg">{vuln.title}</CardTitle>
                <div className="flex items-center gap-2">
                  <Badge variant={getSeverityColor(vuln.severity)}>
                    {vuln.severity}
                  </Badge>
                  <Badge variant="outline">
                    CVSS {vuln.cvss}
                  </Badge>
                  <Badge variant={vuln.status === 'open' ? 'destructive' : 'default'}>
                    {vuln.status}
                  </Badge>
                </div>
              </div>
              <CardDescription>{vuln.id}</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <p className="text-sm">{vuln.description}</p>
                <div>
                  <p className="text-sm font-medium">Affected Systems:</p>
                  <p className="text-sm text-muted-foreground">{vuln.affected}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}