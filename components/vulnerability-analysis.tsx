import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { RefreshCw, ExternalLink, AlertTriangle } from "lucide-react"
import { useVulnerabilities } from "@/lib/hooks"

export function VulnerabilityAnalysis() {
  const { data, loading, error, refetch } = useVulnerabilities(10)
  
  const vulnerabilities = data?.vulnerabilities || []

  // Calculate severity counts
  const severityCounts = vulnerabilities.reduce((acc: any, vuln: any) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1
    return acc
  }, {})

  const getVulnEmoji = (severity: string) => {
    switch (severity) {
      case "critical": return "üö®"
      case "high": return "üî•"
      case "medium": return "‚ö†Ô∏è"
      case "low": return "‚ÑπÔ∏è"
      default: return "üîç"
    }
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-red-700"
      case "high": return "bg-red-600"
      case "medium": return "bg-yellow-600"
      case "low": return "bg-green-600"
      default: return "bg-gray-600"
    }
  }

  return (
    <Card className="border-orange-800/30 bg-black/40">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2 text-orange-300">
              <span className="text-2xl">üõ°Ô∏è</span>
              Vulnerability Analysis
              {loading && <RefreshCw className="h-4 w-4 animate-spin" />}
            </CardTitle>
            <CardDescription className="text-orange-200/70">
              Latest CVE data and security assessments
            </CardDescription>
          </div>
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={refetch}
            disabled={loading}
            className="text-orange-400 hover:text-orange-300"
          >
            <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {error && (
          <div className="flex items-center gap-2 p-3 bg-red-950/30 rounded-lg border border-red-800/20 mb-4">
            <AlertTriangle className="h-4 w-4 text-red-400" />
            <span className="text-red-300 text-sm">{error}</span>
          </div>
        )}
        
        <div className="space-y-4">
          <div className="grid grid-cols-4 gap-4 mb-6">
            <div className="text-center p-3 bg-red-950/30 rounded-lg border border-red-800/20">
              <div className="text-2xl font-bold text-red-400">{severityCounts.critical || 0}</div>
              <div className="text-xs text-red-300">Critical</div>
            </div>
            <div className="text-center p-3 bg-orange-950/30 rounded-lg border border-orange-800/20">
              <div className="text-2xl font-bold text-orange-400">{severityCounts.high || 0}</div>
              <div className="text-xs text-orange-300">High</div>
            </div>
            <div className="text-center p-3 bg-yellow-950/30 rounded-lg border border-yellow-800/20">
              <div className="text-2xl font-bold text-yellow-400">{severityCounts.medium || 0}</div>
              <div className="text-xs text-yellow-300">Medium</div>
            </div>
            <div className="text-center p-3 bg-green-950/30 rounded-lg border border-green-800/20">
              <div className="text-2xl font-bold text-green-400">{severityCounts.low || 0}</div>
              <div className="text-xs text-green-300">Low</div>
            </div>
          </div>

          {vulnerabilities.length === 0 && !loading ? (
            <div className="text-center p-6 text-orange-200/60">
              <span className="text-2xl">üîí</span>
              <p className="mt-2">No recent vulnerabilities found</p>
              <p className="text-xs mt-1">Your systems appear secure</p>
            </div>
          ) : (
            <div className="space-y-3">
              <h4 className="font-medium text-orange-300">Recent CVE Disclosures</h4>
              {vulnerabilities.map((vuln: any, index: number) => (
                <div key={index} className="p-4 bg-orange-950/30 rounded-lg border border-orange-800/20 hover:bg-orange-950/40 transition-colors">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{getVulnEmoji(vuln.severity)}</span>
                      <div>
                        <h5 className="text-sm font-medium text-orange-300">{vuln.title}</h5>
                        <p className="text-xs text-orange-200/60">{vuln.id} ‚Ä¢ CVSS {vuln.cvss}</p>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                    </div>
                  </div>
                  <p className="text-sm text-orange-100/70 mb-2 line-clamp-2">{vuln.description}</p>
                  <div className="flex justify-between items-center text-xs text-orange-200/60">
                    <span>Published: {new Date(vuln.publishedDate).toLocaleDateString()}</span>
                    {vuln.references && vuln.references.length > 0 && (
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-6 px-2 text-orange-400 hover:text-orange-300"
                        onClick={() => window.open(vuln.references[0].url, '_blank')}
                      >
                        <ExternalLink className="h-3 w-3" />
                      </Button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}

          <div className="flex gap-2 pt-4">
            <Button className="bg-orange-600 hover:bg-orange-700">
              View Full CVE Database
            </Button>
            <Button variant="outline" className="border-orange-600 text-orange-300">
              Export Report
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}